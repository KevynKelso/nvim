snippet gpio_setup "GPIO boilerplate" A
uint8_t gpio_test_pin = 6;
GPIO_DisablePullDown(gpio_test_pin);
GPIO_DisablePullUp(gpio_test_pin);
GPIO_SetOutputPinFunction(gpio_test_pin, GPIO_PIN_FUNC_OUT_GPIO);
GPIO_DisableInput(gpio_test_pin);
GPIO_EnableOutput(gpio_test_pin);
GPIO_SetLow(gpio_test_pin);
GPIO_Toggle(gpio_test_pin);

endsnippet

snippet gpio_rx_debug_setup "" A
    // Unlock test mode
    PML->RegTstEn.r32 = 0xCAFEBEEF;
    _nop();
    _nop();
    _nop();
    _nop();

    for (uint8_t gpio_i = 5; gpio_i <= 11; gpio_i++)
    {
      GPIO_DisableInput(gpio_i);
      GPIO_DisablePullDown(gpio_i);
      GPIO_SetOutputPinFunction(gpio_i, GPIO_PIN_FUNC_OUT_GPIO);
      GPIO_SetLow(gpio_i);
      GPIO_EnableOutput(gpio_i);
    }

    // RX debug
    // GPIO4: 
    // GPIO5: LNA enable
    // GPIO6: RF RX on
    // GPIO7: RF TX on
    // GPIO8: rx_crc_err
    // GPIO9: pp_rx_done
    // GPIO10: rf_access_det
    // GPIO11: cpu_sleep
    GPIO_SetOutputPinFunction(5, GPIO_PIN_FUNC_OUT_PML_PAD);
    GPIO_SetOutputPinFunction(6, GPIO_PIN_FUNC_OUT_RX_ON);
    GPIO_SetOutputPinFunction(7, GPIO_PIN_FUNC_OUT_TX_ON);
    SYS->RegDPRTstSel1.r8[0] = 22;
    SYS->RegDPRTstSel1.r8[1] = 22;
    SYS->RegDPRTstSel1.r8[2] = 23;
    SYS->RegDPRTstSel1.r8[3] = 46;
endsnippet

snippet printf_setup "printf boiler on GPIO 7" A
UART_RegisterModule();
if (!PML_DidBootFromSleep())
{
	// Enable output on GPIO7 for UART TX, disable output on other pins
	gGPIO_Config.hardwareState.RegGPIOOutputEn.r32 = (uint32_t)GPIO_MASK_PIN_7;
	// Disable pull-downs on all pins
	gGPIO_Config.hardwareState.RegGPIOPdEn.r32 = (uint32_t)0x000;
	// Enable pull-up on GPIO7 only
	gGPIO_Config.hardwareState.RegGPIOPuEn.r32 = (uint32_t)GPIO_MASK_PIN_7;
	// Set the UART TX output function on GPIO7
	gGPIO_Config.hardwareState.RegGPIOOutSel1.regs.GPIOOutSel7 = (uint8_t)GPIO_PIN_FUNC_OUT_UART_TXD;
}
endsnippet

snippet gpio_radio "" A
uint8_t gpio_rx_pin = 6;
GPIO_DisablePullDown(gpio_rx_pin);
GPIO_DisablePullUp(gpio_rx_pin);
GPIO_SetOutputPinFunction(gpio_rx_pin, GPIO_PIN_FUNC_OUT_RX_ON);
GPIO_DisableInput(gpio_rx_pin);
GPIO_EnableOutput(gpio_rx_pin);
endsnippet

snippet gpio_set_raw "" A
uint8_t gpio = 6;
GPIO->RegGPIOPdEn.r32 &= ~(1 << gpio);
GPIO->RegGPIOPuEn.r32 &= ~(1 << gpio);
uint8_t *pGpioOutSel = (uint8_t*)GPIO->RegGPIOOutSel0.r8;
pGpioOutSel[gpio] = (uint8_t)GPIO_PIN_FUNC_OUT_GPIO; //lint !e415 !e416 !e661 !e662
GPIO->RegGPIOInputEn.r32 &= ~(1 << gpio);
GPIO->RegGPIOOutputEn.r32 |= 1 << gpio;
GPIO->RegGPIODataOutClr.r32 = 1 << gpio;

GPIO->RegGPIODataOut.r32 ^= (1 << gpio); // toggle
endsnippet

snippet inc_printf "" A
#include "printf.h"
#include "puts.h"
endsnippet

snippet Ffor "forward for loop boiler" A
for (int $1 = 0; $1 < $2; $1++) {
}
endsnippet

snippet wsfDynamicBufStats "Dynamic buffer stats for Packetcraft" A
WsfBufPoolStat_t stats;
const uint8_t numPool = WsfBufGetNumPool();

printf("numPool = %d\n", numPool);

for (uint8_t i = 0; i < numPool; i++)
{
WsfBufGetPoolStats(&stats, i);
printf("\tbufSize: %d\n", stats.bufSize);
printf("\tnumBuf: %d\n", stats.numBuf);
printf("\tnumAlloc: %d\n", stats.numAlloc);
printf("\tmaxAlloc: %d\n", stats.maxAlloc);
printf("\tmaxReqLen: %d\n\n", stats.maxReqLen);
}
endsnippet

snippet exceptions_setup "" A
// TODO: Add ${COMMON_DIR}/${TARGET_HW}/includes/arc to cmakelists
/**
 * @brief EV_DivZero exception vector handler (Divide by zero, Integer
 * exception)
 *
 * This is an example of handling the exception by printing a message and
 * restarting the device
 */
#include "arc_reg.h"
void _Interrupt EV_DivZeroHandler(void)
{
    // Exception Fault Address
    const uint32_t faultAddress = ReadAUX((ARC_AUX_Register*)REG_EFA);

    // We cannot use interrupts in the exception handlers so we can only use
    // rudimentary UART instead of printf.
    char messageBuf[100];
    sprintf(messageBuf,
            "Division by zero at address 0x%x.\n"
            "Restarting due to hardware exception.\n",
            faultAddress);
    const uint16_t messageLen = (uint16_t)strlen(messageBuf);
    // Calculate the time needed for transmission because the UART TX interrupt
    // can't tell us.

    UART_SendData(messageBuf, messageLen);
    HaltCPU();
}

/**
 * @brief EV_Misaligned exception vector handler (Misaligned data access)
 *
 * This one is not fully implemented to show that by default, exceptions return
 * to the failed instruction.
 */
void _Interrupt EV_MalignedHandler(void)
{
    
    const uint32_t returnAddress = ReadAUX((ARC_AUX_Register*)REG_ERET);
    const uint32_t faultAddress = ReadAUX((ARC_AUX_Register*)REG_EFA);
    char messageBuf[100];
    sprintf(messageBuf, "Misaligned memory exception at 0x%x, faultAddress = 0x%x", returnAddress, faultAddress);
    const uint16_t messageLen = (uint16_t)strlen(messageBuf);

    UART_SendData(messageBuf, messageLen);
    HaltCPU();
}

/**
 * @brief EV_ProtV exception vector handler (Memory read/write protection)
 *
 * This is an example that outlines handling exception vector with multiple
 * possible causes.
 */
void _Interrupt EV_ProtVHandler(void)
{
    // Exception Fault Address
    const uint32_t faultAddress = ReadAUX((ARC_AUX_Register*)REG_EFA);
    // Exception Cause Register
    const uint32_t exceptionCause = ReadAUX((ARC_AUX_Register*)REG_ECR);

    char messageBuf[100];
    // ProtV vector handless many exceptions causes. We handle only stack
    // over/under flow here.
    // if (exceptionCause == STACK_VIOLATION_WRITE)
    // {
    //   char buff[10];
    //   sprintf(buff, "read");
    //   UART_SendData(buff, 4);
    // }
    // if ((exceptionCause == STACK_VIOLATION_READ) ||
    //     (exceptionCause == STACK_VIOLATION_WRITE))
    // {
    //     sprintf(messageBuf,
    //             "\nStack overflow at address: 0x%x.\n"
    //             "Restarting due to hardware exception.\n",
    //             faultAddress);
    // }
    // else
    // {
        sprintf(messageBuf,
                "\nUnspecified memory violation at address: 0x%x.\n"
                "Restarting due to hardware exception.\n",
                faultAddress);
    // }

    const uint16_t messageLen    = (uint16_t)strlen(messageBuf);

    UART_SendData(messageBuf, messageLen);
    HaltCPU();
}

void _Interrupt MemoryErrorHandler(void)
{
    // Exception Fault Address
    const uint32_t faultAddress = ReadAUX((ARC_AUX_Register*)REG_EFA);
    // Exception Cause Register
    const uint32_t exceptionCause = ReadAUX((ARC_AUX_Register*)REG_ECR);
    char           messageBuf[100];

    sprintf(messageBuf, "MemoryError exception at 0x%x.\ncause: 0x%x.\n", faultAddress, exceptionCause);
    const uint16_t len = (uint16_t)strlen(messageBuf);
    UART_SendData(messageBuf, len);
    HaltCPU();
}

void _Interrupt InstructionErrorHandler(void)
{
    char messageBuf[100];
    sprintf(messageBuf, "InstructionError exception");
    const uint16_t len = (uint16_t)strlen(messageBuf);
    UART_SendData(messageBuf, len);
    HaltCPU();
}

void _Interrupt EV_MachineCheckHandler(void)
{
    char messageBuf[100];
    sprintf(messageBuf, "EV_MachineCheck exception");
    const uint16_t len = (uint16_t)strlen(messageBuf);
    UART_SendData(messageBuf, len);
    HaltCPU();
}

void _Interrupt EV_PrivilegeVHandler(void)
{
    char messageBuf[100];
    sprintf(messageBuf, "EV_Privilege exception");
    const uint16_t len = (uint16_t)strlen(messageBuf);
    UART_SendData(messageBuf, len);
    HaltCPU();
}

void _Interrupt EV_SWIHandler(void)
{
    char messageBuf[100];
    sprintf(messageBuf, "EV_SWIHandler exception");
    const uint16_t len = (uint16_t)strlen(messageBuf);
    UART_SendData(messageBuf, len);
    HaltCPU();
}

void _Interrupt EV_TrapHandler(void)
{
    char messageBuf[100];
    sprintf(messageBuf, "EV_TrapHandler exception");
    const uint16_t len = (uint16_t)strlen(messageBuf);
    UART_SendData(messageBuf, len);
    HaltCPU();
}

void _Interrupt EV_ExtensionHandler(void)
{
    char messageBuf[100];
    sprintf(messageBuf, "EV_ExtensionHandler exception");
    const uint16_t len = (uint16_t)strlen(messageBuf);
    UART_SendData(messageBuf, len);
    HaltCPU();
}

void _Interrupt EV_DCErrorHandler(void)
{
    char messageBuf[100];
    sprintf(messageBuf, "EV_DCErrorHandler exception");
    const uint16_t len = (uint16_t)strlen(messageBuf);
    UART_SendData(messageBuf, len);
    HaltCPU();
}
endsnippet
